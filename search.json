[{"path":"https://ncn-foreigners.github.io/automatedRecLin/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2025). automatedRecLin: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {automatedRecLin: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":"https://ncn-foreigners.github.io/automatedRecLin/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"What the Package Does (One Line, Title Case)","text":"R package designed perform record linkage (also known entity resolution) unsupervised supervised settings. compares pairs records two datasets using selected comparison functions estimate probability density ratio matched non-matched records. Based estimates, predicts set matches maximizes entropy.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"install development version GitHub can use pak package.","code":"# install.packages(\"pak\") # uncomment if needed pak::pkg_install(\"ncn-foreigners/automatedRecLin\")"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"What the Package Does (One Line, Title Case)","text":"Load package examples.","code":"library(automatedRecLin)"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/index.html","id":"unsupervised-maximum-entropy-classifier-for-record-linkage","dir":"","previous_headings":"Basic usage","what":"Unsupervised maximum entropy classifier for record linkage","title":"What the Package Does (One Line, Title Case)","text":"Generate two simple datasets contain common records, typos cases. Specify key variables used record linkage. Select comparison function (.e.Â function compare pairs records) variable. example, use jarowinkler_complement function automatedRecLin package (1 - Jaro-Winkler distance). Choose method estimating probability density ratio variable. available methods : \"binary\", \"continuous_parametric\" \"continuous_nonparametric\". Perform record linkage using mec function. output contains following information: names key variables, number predicted matches, first 6 predicted matches (estimated probability density ratio), method constructing predicted set matches (default: \"size\"), estimated false link rate (FLR), estimated missing match rate (MMR), estimated parameters variables using \"binary\" \"continuous_parametric\" methods.","code":"df_1 <- data.frame(   name = c(\"Emma\", \"Liam\", \"Olivia\", \"Noah\", \"Ava\",            \"Ethan\", \"Sophia\", \"Mason\", \"Isabella\", \"James\"),   surname = c(\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\",               \"Garcia\", \"Miller\", \"Davis\", \"Rodriguez\", \"Wilson\"),   city = c(\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\",            \"Philadelphia\", \"San Antonio\", \"San Diego\", \"Dallas\", \"San Jose\") ) df_2 <- data.frame(   name = c(     \"Emma\", \"Liam\", \"Olivia\", \"Noah\",     \"Ava\", \"Ehtan\", \"Sopia\", \"Mson\",     \"Charlotte\", \"Benjamin\", \"Amelia\", \"Lucas\"   ),   surname = c(     \"Smith\", \"Johnson\", \"Williams\", \"Brown\",     \"Jnes\", \"Garca\", \"Miler\", \"Dvis\",     \"Martinez\", \"Lee\", \"Hernandez\", \"Clark\"   ),   city = c(     \"New York\", \"Los Angeles\", \"Chicago\", \"Houston\",     \"Phonix\", \"Philadelpia\", \"San Antnio\", \"San Dieg\",     \"Seattle\", \"Miami\", \"Boston\", \"Denver\"   ) ) df_1 #>        name   surname         city #> 1      Emma     Smith     New York #> 2      Liam   Johnson  Los Angeles #> 3    Olivia  Williams      Chicago #> 4      Noah     Brown      Houston #> 5       Ava     Jones      Phoenix #> 6     Ethan    Garcia Philadelphia #> 7    Sophia    Miller  San Antonio #> 8     Mason     Davis    San Diego #> 9  Isabella Rodriguez       Dallas #> 10    James    Wilson     San Jose df_2 #>         name   surname        city #> 1       Emma     Smith    New York #> 2       Liam   Johnson Los Angeles #> 3     Olivia  Williams     Chicago #> 4       Noah     Brown     Houston #> 5        Ava      Jnes      Phonix #> 6      Ehtan     Garca Philadelpia #> 7      Sopia     Miler  San Antnio #> 8       Mson      Dvis    San Dieg #> 9  Charlotte  Martinez     Seattle #> 10  Benjamin       Lee       Miami #> 11    Amelia Hernandez      Boston #> 12     Lucas     Clark      Denver variables <- c(\"name\", \"surname\", \"city\") comparators <- list(   \"name\" = jarowinkler_complement(),   \"surname\" = jarowinkler_complement(),   \"city\" = jarowinkler_complement() ) methods <- list(   \"name\" = \"continuous_parametric\",   \"surname\" = \"continuous_parametric\",   \"city\" = \"continuous_parametric\" ) set.seed(1) unsup_result <- mec(A = df_1, B = df_2,                     variables = variables,                     comparators = comparators,                     methods = methods) unsup_result #> Record linkage based on the following variables: name, surname, city. #> ======================================================== #> The algorithm predicted 8 matches. #> The first 6 predicted matches are: #>        a     b ratio / 1000 #>    <num> <num>        <num> #> 1:     6     6 1.433031e+08 #> 2:     8     8 3.198692e+07 #> 3:     7     7 9.673745e+05 #> 4:     5     5 2.813745e+04 #> 5:     1     1 3.375000e+00 #> 6:     2     2 3.375000e+00 #> ======================================================== #> The construction of the classification set was based on estimates of its size. #> Estimated false link rate (FLR): 0.2066 %. #> Estimated missing match rate (MMR): 0.0000 %. #> ======================================================== #> Variables selected for the continuous parametric method: name, surname, city. #> Estimated parameters for the continuous parametric method: #>         variable p_0_M    alpha_M   beta_M      p_0_U  alpha_U    beta_U #>           <char> <num>      <num>    <num>      <num>    <num>     <num> #> 1:    gamma_name 0.625 138.462279 2199.107 0.04166667 6.516736 11.173089 #> 2: gamma_surname 0.500 120.665706 1974.530 0.03333333 4.622775  7.167261 #> 3:    gamma_city 0.500   6.512723  135.163 0.03333333 5.233194  9.313035"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/index.html","id":"supervised-maximimum-entropy-classifier-for-record-linkage","dir":"","previous_headings":"Basic usage","what":"Supervised maximimum entropy classifier for record linkage","title":"What the Package Does (One Line, Title Case)","text":"Generate two simple training datasets contain common records, typos cases. Specify key variables, select comparison functions choose methods estimating probability density ratio. Additionally, provide data.frame indicating known matches. Train record linkage model using train_rec_lin function. Generate two new datasets record linkage prediction. Predict matches using predict function. output similar structure mec function.","code":"df_1_train <- data.frame(         name = c(           \"James\", \"Emma\", \"William\", \"Olivia\", \"Thomas\",           \"Sophie\", \"Harry\", \"Amelia\", \"George\", \"Isabella\"           ),         surname = c(           \"Smith\", \"Johnson\", \"Brown\", \"Taylor\", \"Wilson\",           \"Davis\", \"Clark\", \"Harris\", \"Lewis\", \"Walker\"           ) ) df_2_train <- data.frame(         name = c(           \"James\", \"Ema\", \"Wimliam\", \"Olivia\", \"Charlotte\",           \"Henry\", \"Lucy\", \"Edward\", \"Alice\", \"Jack\"           ),         surname = c(           \"Smith\", \"Johnson\", \"Bron\", \"Tailor\", \"Moore\",           \"Evans\", \"Hall\", \"Wright\", \"Green\", \"King\"           ) ) df_1_train #>        name surname #> 1     James   Smith #> 2      Emma Johnson #> 3   William   Brown #> 4    Olivia  Taylor #> 5    Thomas  Wilson #> 6    Sophie   Davis #> 7     Harry   Clark #> 8    Amelia  Harris #> 9    George   Lewis #> 10 Isabella  Walker df_2_train #>         name surname #> 1      James   Smith #> 2        Ema Johnson #> 3    Wimliam    Bron #> 4     Olivia  Tailor #> 5  Charlotte   Moore #> 6      Henry   Evans #> 7       Lucy    Hall #> 8     Edward  Wright #> 9      Alice   Green #> 10      Jack    King variables_train <- c(\"name\", \"surname\") comparators_train <- list(\"name\" = jarowinkler_complement(),                           \"surname\" = jarowinkler_complement()) methods_train <- list(\"name\" = \"continuous_nonparametric\",                       \"surname\" = \"continuous_nonparametric\") matches_train <- data.frame(\"a\" = 1:4, \"b\" = 1:4) model <- train_rec_lin(A = df_1_train, B = df_2_train,                        matches = matches_train,                        variables = variables_train,                        comparators = comparators_train,                        methods = methods_train) #> Warning in check.sigma(nsigma, sigma_quantile, sigma, dist_nu): There are duplicate values in 'sigma', only the unique values are used. #> Warning in check.sigma(nsigma, sigma_quantile, sigma, dist_nu): There are duplicate values in 'sigma', only the unique values are used. model #> Record linkage model based on the following variables: name, surname. #> The prior probability of matching is 0.04. #> ======================================================== #> Variables selected for the continuous nonparametric method: name, surname. df_1_new <- data.frame(   \"name\" = c(\"John\", \"Emily\", \"Mark\", \"Anna\", \"David\"),   \"surname\" = c(\"Smith\", \"Johnson\", \"Taylor\", \"Williams\", \"Brown\") ) df_2_new <- data.frame(   \"name\" = c(\"John\", \"Emely\", \"Mark\", \"Michael\"),   \"surname\" = c(\"Smitth\", \"Johnson\", \"Tailor\", \"Henders\") ) df_1_new #>    name  surname #> 1  John    Smith #> 2 Emily  Johnson #> 3  Mark   Taylor #> 4  Anna Williams #> 5 David    Brown df_2_new #>      name surname #> 1    John  Smitth #> 2   Emely Johnson #> 3    Mark  Tailor #> 4 Michael Henders result_sup <- predict(model, df_1_new, df_2_new) result_sup #> The algorithm predicted 3 matches. #> The first 3 predicted matches are: #>        a     b ratio / 1000 #>    <num> <num>        <num> #> 1:     2     2   0.04572852 #> 2:     3     3   0.02813814 #> 3:     1     1   0.02560156 #> ======================================================== #> The construction of the classification set was based on estimates of its size. #> Estimated false link rate (FLR): 15.3038 %. #> Estimated missing match rate (MMR): 15.3038 %."},{"path":"https://ncn-foreigners.github.io/automatedRecLin/index.html","id":"integration-with-a-custom-machine-learning-model","dir":"","previous_headings":"","what":"Integration with a custom machine learning model","title":"What the Package Does (One Line, Title Case)","text":"automatedRecLin package supports supervised record linkage using custom machine learning (ML) model predicts probability matching based comparison vectors (e.g., XGBoost, logistic regression). example, install load xgboost package. Use data, variables, comparators previous example. First, use comparison_vectors function create comparison vectors model trained . Construct xgb.DMatrix object, specify model parameters, train XGBoost model. Create XGBoost-based record linkage model. Use model predictions. Note xgboost package requires matrix input predict function needs specified data_type argument. Set type = \"prob\" ensure XGBoost model predicts probability matching (argument may vary depending model library used).","code":"# install.packages(\"xgboost\") # uncomment if needed library(xgboost) vectors <- comparison_vectors(A = df_1_train, B = df_2_train,                               variables = variables_train,                               comparators = comparators_train,                               matches = matches_train) vectors #> Comparison based on the following variables: name, surname. #> ======================================================== #>        a     b gamma_name gamma_surname match #>    <int> <int>      <num>         <num> <num> #> 1:     1     1  0.0000000     0.0000000     1 #> 2:     1     2  0.4777778     0.5523810     0 #> 3:     1     3  0.5523810     1.0000000     0 #> 4:     1     4  1.0000000     0.5444444     0 #> 5:     1     5  0.5629630     1.0000000     0 #> 6:     1     6  1.0000000     1.0000000     0 train_data <- xgb.DMatrix(   data = as.matrix(vectors$Omega[, c(\"gamma_name\", \"gamma_surname\")]),   label = vectors$Omega$match ) params <- list(objective = \"binary:logistic\",                eval_metric = \"logloss\") model_xgb <- xgboost(data = train_data, params = params,                      nrounds = 100, verbose = 0) custom_xgb_model <- custom_rec_lin_model(model_xgb, vectors) custom_xgb_model #> Record linkage model based on the following variables: name, surname. #> A custom ML model was used. #> The prior probability of matching is 0.04. result_xgb <- predict(custom_xgb_model, df_1_new, df_2_new,                       data_type = \"matrix\", type = \"prob\") result_xgb #> The algorithm predicted 3 matches. #> The first 3 predicted matches are: #>        a     b ratio / 1000 #>    <num> <num>        <num> #> 1:     1     1   0.03702279 #> 2:     2     2   0.03702279 #> 3:     3     3   0.03702279 #> ======================================================== #> The construction of the classification set was based on estimates of its size. #> Estimated false link rate (FLR): 13.2742 %. #> Estimated missing match rate (MMR): 13.2742 %."},{"path":"https://ncn-foreigners.github.io/automatedRecLin/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"What the Package Does (One Line, Title Case)","text":"Work package supported National Science Centre, OPUS 20 grant . 2020/39/B/HS4/00941 (Towards census-like statistics foreign-born populations â quality, data integration estimation).","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"What the Package Does (One Line, Title Case)","text":"Lee, D., Zhang, L.-C. Kim, J. K. (2022). Maximum entropy classification record linkage. Survey Methodology, Statistics Canada, Catalogue .Â 12-001-X, Vol. 48, .Â 1. Vo, T. H., Chauvet, G., Happe, ., Oger, E., Paquelet, S., GarÃ¨s, V. (2023). Extending Fellegi-Sunter record linkage model mixed-type data application French national health data system. Computational Statistics & Data Analysis, 179, 107656. Sugiyama, M., Suzuki, T., Nakajima, S. et al.Â Direct importance estimation covariate shift adaptation. Ann Inst Stat Math 60, 699â746 (2008).","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/abs_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Absolute Distance Comparison Function â abs_distance","title":"Absolute Distance Comparison Function â abs_distance","text":"Creates function calculates absolute distance two values.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/abs_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Absolute Distance Comparison Function â abs_distance","text":"","code":"abs_distance()"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/abs_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Absolute Distance Comparison Function â abs_distance","text":"Returns function taking two arguments, x y, returning absolute difference.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/abs_distance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Absolute Distance Comparison Function â abs_distance","text":"Adam Struzik","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/abs_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Absolute Distance Comparison Function â abs_distance","text":"","code":"cmp <- abs_distance() cmp(1, 5) # returns 4 #> [1] 4"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/comparison_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Comparison Vectors for Record Linkage â comparison_vectors","title":"Create Comparison Vectors for Record Linkage â comparison_vectors","text":"Creates comparison vectors records two datasets based specified variables comparison functions.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/comparison_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Comparison Vectors for Record Linkage â comparison_vectors","text":"","code":"comparison_vectors(A, B, variables, comparators = NULL, matches = NULL)"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/comparison_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Comparison Vectors for Record Linkage â comparison_vectors","text":"duplicate-free data.frame data.table. B duplicate-free data.frame data.table. variables character vector key variables used create comparison vectors. comparators named list functions comparing pairs records. matches Optional. data.frame data.table indicating known matches.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/comparison_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Comparison Vectors for Record Linkage â comparison_vectors","text":"Returns list containing: Omega â data.table comparison vectors records datasets, including optional match information, variables â character vector key variables used comparison, comparators â list functions used compare pairs records, match_prop â proportion matches smaller dataset.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/comparison_vectors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create Comparison Vectors for Record Linkage â comparison_vectors","text":"Adam Struzik","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/comparison_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Comparison Vectors for Record Linkage â comparison_vectors","text":"","code":"df_1 <- data.frame( \"name\" = c(\"John\", \"Emily\", \"Mark\", \"Anna\", \"David\"), \"surname\" = c(\"Smith\", \"Johnson\", \"Taylor\", \"Williams\", \"Brown\") ) df_2 <- data.frame(   \"name\" = c(\"Jon\", \"Emely\", \"Marc\", \"Michael\"),   \"surname\" = c(\"Smitth\", \"Jonson\", \"Tailor\", \"Henderson\") ) comparators <- list(\"name\" = jarowinkler_complement(),                     \"surname\" = jarowinkler_complement()) matches <- data.frame(\"a\" = 1:3, \"b\" = 1:3) result <- comparison_vectors(A = df_1, B = df_2, variables = c(\"name\", \"surname\"),                              comparators = comparators, matches = matches) result #> Comparison based on the following variables: name, surname. #> ======================================================== #>        a     b gamma_name gamma_surname match #>    <int> <int>      <num>         <num> <num> #> 1:     1     1 0.08333333    0.05555556     1 #> 2:     1     2 1.00000000    1.00000000     0 #> 3:     1     3 1.00000000    0.54444444     0 #> 4:     1     4 0.53571429    1.00000000     0 #> 5:     2     1 1.00000000    1.00000000     0 #> 6:     2     2 0.13333333    0.04761905     1"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/control_kliep.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for the kliep Function â control_kliep","title":"Controls for the kliep Function â control_kliep","text":"Controls kliep function used package.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/control_kliep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for the kliep Function â control_kliep","text":"","code":"control_kliep(scale = NULL, progressbar = FALSE, nfold = 2, ...)"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/control_kliep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for the kliep Function â control_kliep","text":"scale \"numerator\", \"denominator\" NULL, indicating whether standardize numeric variable according numerator means standard deviations, denominator means standard deviations, apply standardization . progressbar Logical indicating whether display progressbar. nfold Number cross-validation folds used order calculate optimal sigma value (default 5-fold cv). ... Additional arguments.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/control_kliep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for the kliep Function â control_kliep","text":"Returns list parameters.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/control_kliep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Controls for the kliep Function â control_kliep","text":"Adam Struzik","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/custom_rec_lin_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Custom Record Linkage Model â custom_rec_lin_model","title":"Create a Custom Record Linkage Model â custom_rec_lin_model","text":"Creates supervised record linkage model using custom machine learning (ML) classifier.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/custom_rec_lin_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Custom Record Linkage Model â custom_rec_lin_model","text":"","code":"custom_rec_lin_model(ml_model, vectors)"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/custom_rec_lin_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Custom Record Linkage Model â custom_rec_lin_model","text":"ml_model trained ML model predicts probability match based comparison vectors. vectors object class comparison_vectors (result comparison_vectors function), used training ml_model.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/custom_rec_lin_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Custom Record Linkage Model â custom_rec_lin_model","text":"Returns list containing: b_vars â NULL, cpar_vars â NULL, cnonpar_vars â NULL, b_params â NULL, cpar_params â NULL, cnonpar_params â NULL, ratio_kliep â NULL, ratio_kliep_list â NULL, ml_model â ML model used creating record linkage model, pi_est â prior probability matching, match_prop â proportion matches smaller dataset, variables â character vector key variables used comparison, comparators â list functions used compare pairs records, methods â NULL.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/custom_rec_lin_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a Custom Record Linkage Model â custom_rec_lin_model","text":"Adam Struzik","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/custom_rec_lin_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Custom Record Linkage Model â custom_rec_lin_model","text":"","code":"if (requireNamespace(\"xgboost\", quietly = TRUE)) {   df_1 <- data.frame(     \"name\" = c(\"James\", \"Emma\", \"William\", \"Olivia\", \"Thomas\",     \"Sophie\", \"Harry\", \"Amelia\", \"George\", \"Isabella\"),     \"surname\" = c(\"Smith\", \"Johnson\", \"Brown\", \"Taylor\", \"Wilson\",     \"Davis\", \"Clark\", \"Harris\", \"Lewis\", \"Walker\")   )   df_2 <- data.frame(     \"name\" = c(\"James\", \"Ema\", \"Wimliam\", \"Olivia\", \"Charlotte\",     \"Henry\", \"Lucy\", \"Edward\", \"Alice\", \"Jack\"),     \"surname\" = c(\"Smith\", \"Johnson\", \"Bron\", \"Tailor\", \"Moore\",     \"Evans\", \"Hall\", \"Wright\", \"Green\", \"King\")   )   comparators <- list(\"name\" = jarowinkler_complement(),                       \"surname\" = jarowinkler_complement())   matches <- data.frame(\"a\" = 1:4, \"b\" = 1:4)   vectors <- comparison_vectors(A = df_1, B = df_2, variables = c(\"name\", \"surname\"),                                comparators = comparators, matches = matches)   train_data <- xgboost::xgb.DMatrix(     data = as.matrix(vectors$Omega[, c(\"gamma_name\", \"gamma_surname\")]),     label = vectors$Omega$match   )   params <- list(objective = \"binary:logistic\",                  eval_metric = \"logloss\")   model_xgb <- xgboost::xgboost(data = train_data, params = params,                                 nrounds = 100, verbose = 0)   custom_xgb_model <- custom_rec_lin_model(model_xgb, vectors)   custom_xgb_model } #> Record linkage model based on the following variables: name, surname. #> A custom ML model was used. #> The prior probability of matching is 0.04."},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/jarowinkler_complement.html","id":null,"dir":"Reference","previous_headings":"","what":"Jaro-Winkler Distance Complement â jarowinkler_complement","title":"Jaro-Winkler Distance Complement â jarowinkler_complement","text":"Creates function calculates complement Jaro-Winkler distance two strings (.e., 1 - Jaro-Winkler distance).","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/jarowinkler_complement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jaro-Winkler Distance Complement â jarowinkler_complement","text":"","code":"jarowinkler_complement()"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/jarowinkler_complement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jaro-Winkler Distance Complement â jarowinkler_complement","text":"Returns function taking two string arguments, x y, returning complement Jaro-Winkler distance.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/jarowinkler_complement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Jaro-Winkler Distance Complement â jarowinkler_complement","text":"Adam Struzik","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/mec.html","id":null,"dir":"Reference","previous_headings":"","what":"Unsupervised Maximum Entropy Classifier for Record Linkage â mec","title":"Unsupervised Maximum Entropy Classifier for Record Linkage â mec","text":"Implements several extensions maximum entropy classification (MEC) algorithm record linkage (see Lee et al. (2022)), iteratively estimating probability / density ratios classify record pairs matches non-matches based comparison vectors.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/mec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unsupervised Maximum Entropy Classifier for Record Linkage â mec","text":"","code":"mec(   A,   B,   variables,   comparators = NULL,   methods = NULL,   start_params = NULL,   nonpar_hurdle = FALSE,   set_construction = NULL,   target_flr = 0.03,   max_iter_bisection = 100,   tol = 0.005,   delta = 0.5,   eps = 0.05,   max_iter_em = 10,   tol_em = 1,   controls_nleqslv = list(),   controls_kliep = control_kliep(),   true_matches = NULL )"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/mec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unsupervised Maximum Entropy Classifier for Record Linkage â mec","text":"duplicate-free data.frame data.table. B duplicate-free data.frame data.table. variables character vector key variables used create comparison vectors. comparators named list functions comparing pairs records. methods named list methods used estimation (\"binary\", \"continuous_parametric\", \"continuous_nonparametric\" \"hit_miss\"). start_params Start parameters \"binary\", \"continuous_parametric\" \"hit_miss\" methods. nonpar_hurdle Logical indicating whether use hurdle model (used \"continuous_nonparametric\" method chosen least one variable). set_construction method constructing predicted set matches (\"size\" \"flr\"). target_flr target false link rate (FLR) (used set_construction == \"flr\"). max_iter_bisection maximum number iterations bisection procedure (used set_construction == \"flr\"). tol Error tolerance bisection procedure (used set_construction == \"flr\"). delta numeric value specifying tolerance change estimated number matches iterations. eps numeric value specifying tolerance change model parameters iterations. max_iter_em maximum number iterations EM algorithm (used \"hit_miss\" method chosen least one variable). tol_em Error tolerance EM algorithm (used \"hit_miss\" method chosen least one variable). controls_nleqslv Controls passed nleqslv function (\"continuous_parametric\" method chosen least one variable). controls_kliep Controls passed kliep function (\"continuous_nonparametric\" method chosen least one variable). true_matches data.frame data.table indicating known matches.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/mec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unsupervised Maximum Entropy Classifier for Record Linkage â mec","text":"Returns list containing: M_est â data.table predicted matches, n_M_est â estimated classification set size, flr_est â estimated false link rate (FLR), mmr_est â estimated missing match rate (MMR), iter_bisection â number iterations bisection procedure, b_vars â character vector variables used \"binary\" method (prefix \"gamma_\"), cpar_vars â character vector variables used \"continuous_parametric\" method (prefix \"gamma_\"), cnonpar_vars â character vector variables used \"continuous_nonparametric\" method (prefix \"gamma_\"), hm_vars â character vector variables used \"hit_miss\" method (prefix \"gamma_\"), b_params â parameters estimated using \"binary\" method, cpar_params â parameters estimated using \"continuous_parametric\" method, hm_params â parameters estimated using \"hit_miss\" method, ratio_kliep â result kliep function, variables â character vector key variables used comparison, set_construction â method constructing predicted set matches, eval_metrics â metrics quality assessment (true_matches provided), confusion â confusion matrix (true_matches provided).","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/mec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unsupervised Maximum Entropy Classifier for Record Linkage â mec","text":"Consider two datasets without duplicates: \\(\\) \\(B\\). Let bipartite comparison space \\(\\Omega = \\times B\\) consist matches \\(M\\) non-matches \\(U\\) records files \\(\\) \\(B\\). pair records \\((,b) \\\\Omega\\), let \\(\\pmb{\\gamma}_{ab} = (\\gamma_{ab}^1,\\gamma_{ab}^2, \\ldots,\\gamma_{ab}^K)'\\) comparison vector set key variables. original MEC algorithm uses binary comparison function evaluate record pairs across two datasets. However, approach may insufficient handling datasets frequent errors across multiple variables. propose use continuous comparison functions address limitations binary comparison methods. consider every semi-metric, .e., function \\(d: \\times B \\\\mathbb{R}\\), satisfying following conditions: \\(d(x,y) \\geq 0\\), \\(d(x,y) = 0\\) \\(x = y\\), \\(d(x,y) = d(y,x)\\). example, can use \\(1 - \\text{Jaro-Winkler distance}\\) character variables (implemented automatedRecLin package jarowinkler_complement function) Euclidean distance numerical variables. automatedRecLin package allows use different comparison function key variable (specified list comparators argument). default function key variable cmp_identical (binary comparison function). mec function offers different approaches estimate probability / density ratio matches non-matches, specified list methods argument. available methods suitable binary comparison function \"binary\" \"hit_miss\". assume \\(\\gamma_{ab}^k|M\\) \\(\\gamma_{ab}^k|U\\) follow Bernoulli distributions. \"binary\" \"hit_miss\" estimate parameters matches iteratively, \"binary\" estimates parameters non-matches start, \"hit_miss\" iteratively using hit-miss model (details see Lee et al. (2022)). \"binary\" default method variable. continuous semi-metrics propose usage \"continuous_parametric\" \"continuous_nonparametric\" method. \"continuous_parametric\" method assumes \\(\\gamma_{ab}^k|M\\) \\(\\gamma_{ab}^k|U\\) follow hurdle Gamma distributions. density function hurdle Gamma distribution characterized three parameters \\(p_0 \\(0,1)\\) \\(\\alpha, \\beta > 0\\) follows: $$ f(x;p_0,\\alpha,\\beta) = p_0^{\\mathbb{}(x = 0)}[(1 - p_0) v(x;\\alpha,\\beta)]^{\\mathbb{}(x > 0)}, $$ $$ v(x;\\alpha,\\beta) = \\frac{\\beta^{\\alpha} x^{\\alpha - 1} \\exp(-\\beta x)} {\\Gamma(\\alpha)} $$ density function Gamma distribution (details see Vo et al. (2023)). beginning, algorithm estimates parameters non-matches iteratively matches. \"continuous_nonparametric\" method assume anything distributions comparison vectors. iteratively directly estimates density ratio matches non-matches, using Kullback-Leibler Importance Estimation Procedure (KLIEP). details see Sugiyama et al. (2008). mec function allows construction predicted set matches using estimated size bisection procedure, described Lee et al. (2022), based target False Link Rate (FLR).","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/mec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Unsupervised Maximum Entropy Classifier for Record Linkage â mec","text":"Lee, D., Zhang, L.-C. Kim, J. K. (2022). Maximum entropy classification record linkage. Survey Methodology, Statistics Canada, Catalogue . 12-001-X, Vol. 48, . 1. Vo, T. H., Chauvet, G., Happe, ., Oger, E., Paquelet, S., GarÃ¨s, V. (2023). Extending Fellegi-Sunter record linkage model mixed-type data application French national health data system. Computational Statistics & Data Analysis, 179, 107656. Sugiyama, M., Suzuki, T., Nakajima, S. et al. Direct importance estimation covariate shift adaptation. Ann Inst Stat Math 60, 699â746 (2008). doi:10.1007/s10463-008-0197-x","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/mec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Unsupervised Maximum Entropy Classifier for Record Linkage â mec","text":"Adam Struzik","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/mec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unsupervised Maximum Entropy Classifier for Record Linkage â mec","text":"","code":"df_1 <- data.frame(   name = c(\"Emma\", \"Liam\", \"Olivia\", \"Noah\", \"Ava\",            \"Ethan\", \"Sophia\", \"Mason\", \"Isabella\", \"James\"),   surname = c(\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\",               \"Garcia\", \"Miller\", \"Davis\", \"Rodriguez\", \"Wilson\"),   city = c(\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\",            \"Philadelphia\", \"San Antonio\", \"San Diego\", \"Dallas\", \"San Jose\") )  df_2 <- data.frame(   name = c(     \"Emma\", \"Liam\", \"Olivia\", \"Noah\",     \"Ava\", \"Ehtan\", \"Sopia\", \"Mson\",     \"Charlotte\", \"Benjamin\", \"Amelia\", \"Lucas\"   ),   surname = c(      \"Smith\", \"Johnson\", \"Williams\", \"Brown\",     \"Jnes\", \"Garca\", \"Miler\", \"Dvis\",     \"Martinez\", \"Lee\", \"Hernandez\", \"Clark\"   ),   city = c(     \"New York\", \"Los Angeles\", \"Chicago\", \"Houston\",     \"Phonix\", \"Philadelpia\", \"San Antnio\", \"San Dieg\",     \"Seattle\", \"Miami\", \"Boston\", \"Denver\"   ) ) true_matches <- data.frame(   \"a\" = 1:8,   \"b\" = 1:8 )  variables <- c(\"name\", \"surname\", \"city\") comparators <- list(   \"name\" = jarowinkler_complement(),   \"surname\" = jarowinkler_complement(),   \"city\" = jarowinkler_complement() ) methods <- list(   \"name\" = \"continuous_parametric\",   \"surname\" = \"continuous_parametric\",   \"city\" = \"continuous_parametric\" )  set.seed(1) result <- mec(A = df_1, B = df_2,               variables = variables,               comparators = comparators,               methods = methods,               true_matches = true_matches) result #> Record linkage based on the following variables: name, surname, city. #> ======================================================== #> The algorithm predicted 8 matches. #> The first 6 predicted matches are: #>        a     b ratio / 1000 #>    <num> <num>        <num> #> 1:     6     6 1.433031e+08 #> 2:     8     8 3.198692e+07 #> 3:     7     7 9.673745e+05 #> 4:     5     5 2.813745e+04 #> 5:     1     1 3.375000e+00 #> 6:     2     2 3.375000e+00 #> ======================================================== #> The construction of the classification set was based on estimates of its size. #> Estimated false link rate (FLR): 0.2066 %. #> Estimated missing match rate (MMR): 0.0000 %. #> ======================================================== #> Variables selected for the continuous parametric method: name, surname, city. #> Estimated parameters for the continuous parametric method: #>         variable p_0_M    alpha_M   beta_M      p_0_U  alpha_U    beta_U #>           <char> <num>      <num>    <num>      <num>    <num>     <num> #> 1:    gamma_name 0.625 138.462279 2199.107 0.04166667 6.516736 11.173089 #> 2: gamma_surname 0.500 120.665706 1974.530 0.03333333 4.622775  7.167261 #> 3:    gamma_city 0.500   6.512723  135.163 0.03333333 5.233194  9.313035 #> ======================================================== #> Evaluation metrics (presented in percentages): #>      recall   precision         fpr         fnr    accuracy specificity  #>         100         100           0           0         100         100  #>    f1_score  #>         100"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/predict.rec_lin_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Matches Based on a Given Record Linkage Model â predict.rec_lin_model","title":"Predict Matches Based on a Given Record Linkage Model â predict.rec_lin_model","text":"Predicts matches records two datasets based given record linkage model.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/predict.rec_lin_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Matches Based on a Given Record Linkage Model â predict.rec_lin_model","text":"","code":"# S3 method for class 'rec_lin_model' predict(   object,   newdata_A,   newdata_B,   set_construction = c(\"size\", \"flr\"),   fixed_method = \"Newton\",   target_flr = 0.05,   tol = 10^(-3),   max_iter = 50,   data_type = c(\"data.frame\", \"data.table\", \"matrix\"),   true_matches = NULL,   ... )"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/predict.rec_lin_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Matches Based on a Given Record Linkage Model â predict.rec_lin_model","text":"object rec_lin_model object train_rec_lin custom_rec_lin_model functions. newdata_A duplicate-free data.frame data.table. newdata_B duplicate-free data.frame data.table. set_construction method constructing predicted set matches (\"size\" \"flr\"). fixed_method method solving fixed-point equations using FixedPoint function (used set_construction == \"size\"). target_flr target false link rate (FLR) (used set_construction == \"flr\"). tol Error tolerance bisection procedure (used set_construction == \"flr\"). max_iter maximum number iterations bisection procedure (used set_construction == \"flr\"). data_type Data type predictions custom ML model (\"data.frame\", \"data.table\" \"matrix\"; used object custom_rec_lin_model function). true_matches data.frame data.table indicating true matches. ... Additional controls passed predict function custom ML model (used object custom_rec_lin_model function).","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/predict.rec_lin_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Matches Based on a Given Record Linkage Model â predict.rec_lin_model","text":"Returns list containing: M_est â data.table predicted matches, set_construction â method constructing predicted set matches, n_M_est â estimated classification set size, flr_est â estimated false link rate (FLR), mmr_est â estimated missing match rate (MMR), iter â number iterations bisection procedure, eval_metrics â metrics quality assessment, true_matches provided, confusion â confusion matrix, true_matches provided.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/predict.rec_lin_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict Matches Based on a Given Record Linkage Model â predict.rec_lin_model","text":"Lee, D., Zhang, L.-C. Kim, J. K. (2022). Maximum entropy classification record linkage. Survey Methodology, Statistics Canada, Catalogue . 12-001-X, Vol. 48, . 1. Vo, T. H., Chauvet, G., Happe, ., Oger, E., Paquelet, S., GarÃ¨s, V. (2023). Extending Fellegi-Sunter record linkage model mixed-type data application French national health data system. Computational Statistics & Data Analysis, 179, 107656. Sugiyama, M., Suzuki, T., Nakajima, S. et al. Direct importance estimation covariate shift adaptation. Ann Inst Stat Math 60, 699â746 (2008). doi:10.1007/s10463-008-0197-x","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/predict.rec_lin_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict Matches Based on a Given Record Linkage Model â predict.rec_lin_model","text":"Adam Struzik","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/predict.rec_lin_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Matches Based on a Given Record Linkage Model â predict.rec_lin_model","text":"","code":"df_1 <- data.frame(   \"name\" = c(\"James\", \"Emma\", \"William\", \"Olivia\", \"Thomas\",   \"Sophie\", \"Harry\", \"Amelia\", \"George\", \"Isabella\"),   \"surname\" = c(\"Smith\", \"Johnson\", \"Brown\", \"Taylor\", \"Wilson\",   \"Davis\", \"Clark\", \"Harris\", \"Lewis\", \"Walker\") )  df_2 <- data.frame(   \"name\" = c(\"James\", \"Ema\", \"Wimliam\", \"Olivia\", \"Charlotte\",   \"Henry\", \"Lucy\", \"Edward\", \"Alice\", \"Jack\"),   \"surname\" = c(\"Smith\", \"Johnson\", \"Bron\", \"Tailor\", \"Moore\",   \"Evans\", \"Hall\", \"Wright\", \"Green\", \"King\") ) comparators <- list(\"name\" = jarowinkler_complement(),                     \"surname\" = jarowinkler_complement()) matches <- data.frame(\"a\" = 1:4, \"b\" = 1:4) methods <- list(\"name\" = \"continuous_nonparametric\",                 \"surname\" = \"continuous_nonparametric\") model <- train_rec_lin(A = df_1, B = df_2, matches = matches,                        variables = c(\"name\", \"surname\"),                        comparators = comparators,                        methods = methods) #> Warning: There are duplicate values in 'sigma', only the unique values are used. #> Warning: There are duplicate values in 'sigma', only the unique values are used.  df_new_1 <- data.frame(   \"name\" = c(\"John\", \"Emily\", \"Mark\", \"Anna\", \"David\"),   \"surname\" = c(\"Smith\", \"Johnson\", \"Taylor\", \"Williams\", \"Brown\") ) df_new_2 <- data.frame(   \"name\" = c(\"John\", \"Emely\", \"Mark\", \"Michael\"),   \"surname\" = c(\"Smitth\", \"Johnson\", \"Tailor\", \"Henders\") ) predict(model, df_new_1, df_new_2) #> The algorithm predicted 3 matches. #> The first 3 predicted matches are: #>        a     b ratio / 1000 #>    <num> <num>        <num> #> 1:     2     2   0.04572852 #> 2:     3     3   0.02813814 #> 3:     1     1   0.02560156 #> ======================================================== #> The construction of the classification set was based on estimates of its size. #> Estimated false link rate (FLR): 15.3038 %. #> Estimated missing match rate (MMR): 15.3038 %."},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/train_rec_lin.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Record Linkage Model â train_rec_lin","title":"Train a Record Linkage Model â train_rec_lin","text":"Trains supervised record linkage model using probability density ratio estimation.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/train_rec_lin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Record Linkage Model â train_rec_lin","text":"","code":"train_rec_lin(   A,   B,   matches,   variables,   comparators = NULL,   methods = NULL,   prob_ratio = NULL,   nonpar_hurdle = TRUE,   controls_nleqslv = list(),   controls_kliep = control_kliep() )"},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/train_rec_lin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Record Linkage Model â train_rec_lin","text":"duplicate-free data.frame data.table. B duplicate-free data.frame data.table. matches data.frame data.table indicating known matches. variables character vector key variables used create comparison vectors. comparators named list functions comparing pairs records. methods named list methods used estimation (\"binary\", \"continuous_parametric\" \"continuous_nonparametric\"). prob_ratio Probability ratio type (\"1\" \"2\"). nonpar_hurdle Logical indicating whether use hurdle model (used \"continuous_nonparametric\" method chosen least one variable). controls_nleqslv Controls passed nleqslv function (\"continuous_parametric\" method chosen least one variable). controls_kliep Controls passed kliep function (\"continuous_nonparametric\" method chosen least one variable).","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/train_rec_lin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Record Linkage Model â train_rec_lin","text":"Returns list containing: b_vars â character vector variables used \"binary\" method (prefix \"gamma_\"), cpar_vars â character vector variables used \"continuous_parametric\" method (prefix \"gamma_\"), cnonpar_vars â character vector variables used \"continuous_nonparametric\" method (prefix \"gamma_\"), b_params â parameters estimated using \"binary\" method, cpar_params â parameters estimated using \"continuous_parametric\" method, cnonpar_params â probability exact matching estimated using \"continuous_nonparametric\" method, ratio_kliep â result kliep function, ratio_kliep_list â object containing results kliep function, ml_model â NULL, pi_est â prior probability matching, match_prop â proportion matches smaller dataset, variables â character vector key variables used comparison, comparators â list functions used compare pairs records, methods â list methods used estimation.","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/train_rec_lin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Train a Record Linkage Model â train_rec_lin","text":"Lee, D., Zhang, L.-C. Kim, J. K. (2022). Maximum entropy classification record linkage. Survey Methodology, Statistics Canada, Catalogue . 12-001-X, Vol. 48, . 1. Vo, T. H., Chauvet, G., Happe, ., Oger, E., Paquelet, S., GarÃ¨s, V. (2023). Extending Fellegi-Sunter record linkage model mixed-type data application French national health data system. Computational Statistics & Data Analysis, 179, 107656. Sugiyama, M., Suzuki, T., Nakajima, S. et al. Direct importance estimation covariate shift adaptation. Ann Inst Stat Math 60, 699â746 (2008). doi:10.1007/s10463-008-0197-x","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/train_rec_lin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train a Record Linkage Model â train_rec_lin","text":"Adam Struzik","code":""},{"path":"https://ncn-foreigners.github.io/automatedRecLin/reference/train_rec_lin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Record Linkage Model â train_rec_lin","text":"","code":"df_1 <- data.frame(   \"name\" = c(\"James\", \"Emma\", \"William\", \"Olivia\", \"Thomas\",   \"Sophie\", \"Harry\", \"Amelia\", \"George\", \"Isabella\"),   \"surname\" = c(\"Smith\", \"Johnson\", \"Brown\", \"Taylor\", \"Wilson\",   \"Davis\", \"Clark\", \"Harris\", \"Lewis\", \"Walker\") )  df_2 <- data.frame(   \"name\" = c(\"James\", \"Ema\", \"Wimliam\", \"Olivia\", \"Charlotte\",   \"Henry\", \"Lucy\", \"Edward\", \"Alice\", \"Jack\"),   \"surname\" = c(\"Smith\", \"Johnson\", \"Bron\", \"Tailor\", \"Moore\",   \"Evans\", \"Hall\", \"Wright\", \"Green\", \"King\") ) comparators <- list(\"name\" = jarowinkler_complement(),                     \"surname\" = jarowinkler_complement()) matches <- data.frame(\"a\" = 1:4, \"b\" = 1:4) methods <- list(\"name\" = \"continuous_nonparametric\",                 \"surname\" = \"continuous_nonparametric\") model <- train_rec_lin(A = df_1, B = df_2, matches = matches,                        variables = c(\"name\", \"surname\"),                        comparators = comparators,                        methods = methods) #> Warning: There are duplicate values in 'sigma', only the unique values are used. #> Warning: There are duplicate values in 'sigma', only the unique values are used. model #> Record linkage model based on the following variables: name, surname. #> The prior probability of matching is 0.04. #> ======================================================== #> Variables selected for the continuous nonparametric method: name, surname."}]
